# Mark Liu's modifications to get the crosstool working on a Windows 11 setup

--- a/third_party/gpus/cuda_configure.bzl
+++ b/third_party/gpus/cuda_configure.bzl
@@ -168,7 +168,7 @@ def _get_win_cuda_defines(repository_ctx):
         ),
     )

-    msvc_cl_path = get_python_bin(repository_ctx)
+    msvc_cl_path = get_python_bin(repository_ctx).replace("\\", "\\\\")
     msvc_ml_path = find_msvc_tool(repository_ctx, vc_path, "ml64.exe").replace(
         "\\",
         "/",
@@ -390,7 +390,7 @@ def _cuda_include_path(repository_ctx, cuda_config):

 def enable_cuda(repository_ctx):
     """Returns whether to build with CUDA support."""
-    return int(get_host_environ(repository_ctx, "TF_NEED_CUDA", False))
+    return True

 def matches_version(environ_version, detected_version):
     """Checks whether the user-specified version matches the detected version.
@@ -963,12 +963,13 @@ def _tf_sysroot(repository_ctx):
     return get_host_environ(repository_ctx, _TF_SYSROOT, "")

 def _compute_cuda_extra_copts(repository_ctx, compute_capabilities):
-    copts = ["--no-cuda-include-ptx=all"] if _use_cuda_clang(repository_ctx) else []
-    for capability in compute_capabilities:
-        if capability.startswith("compute_"):
-            capability = capability.replace("compute_", "sm_")
-            copts.append("--cuda-include-ptx=%s" % capability)
-        copts.append("--cuda-gpu-arch=%s" % capability)
+    copts = []
+    # copts = ["--no-cuda-include-ptx=all"] if _use_cuda_clang(repository_ctx) else []
+    # for capability in compute_capabilities:
+    #     if capability.startswith("compute_"):
+    #         capability = capability.replace("compute_", "sm_")
+    #         copts.append("--cuda-include-ptx=%s" % capability)
+    #     copts.append("--cuda-gpu-arch=%s" % capability)

     return str(copts)

@@ -1008,7 +1009,7 @@ def _create_local_cuda_repository(repository_ctx):
         "cuda:cuda_config.py",
     ]}
     tpl_paths["cuda:BUILD"] = _tpl_path(repository_ctx, "cuda:BUILD.windows" if is_windows(repository_ctx) else "cuda:BUILD")
-    find_cuda_config_script = repository_ctx.path(Label("@org_tensorflow//third_party/gpus:find_cuda_config.py.gz.base64"))
+    find_cuda_config_script = repository_ctx.path(Label("//third_party/gpus:find_cuda_config.py.gz.base64"))

     cuda_config = _get_cuda_config(repository_ctx, find_cuda_config_script)

@@ -1107,7 +1108,7 @@ def _create_local_cuda_repository(repository_ctx):
         ],
     ))

-    check_cuda_libs_script = repository_ctx.path(Label("@org_tensorflow//third_party/gpus:check_cuda_libs.py"))
+    check_cuda_libs_script = repository_ctx.path(Label("//third_party/gpus:check_cuda_libs.py"))
     cuda_libs = _find_libs(repository_ctx, check_cuda_libs_script, cuda_config)
     cuda_lib_srcs = []
     cuda_lib_outs = []
@@ -1424,15 +1425,16 @@ def _cuda_autoconf_impl(repository_ctx):
     if not enable_cuda(repository_ctx):
         _create_dummy_repository(repository_ctx)
     elif get_host_environ(repository_ctx, _TF_CUDA_CONFIG_REPO) != None:
-        has_cuda_version = get_host_environ(repository_ctx, _TF_CUDA_VERSION) != None
-        has_cudnn_version = get_host_environ(repository_ctx, _TF_CUDNN_VERSION) != None
-        if not has_cuda_version or not has_cudnn_version:
-            auto_configure_fail("%s and %s must also be set if %s is specified" %
-                                (_TF_CUDA_VERSION, _TF_CUDNN_VERSION, _TF_CUDA_CONFIG_REPO))
-        _create_remote_cuda_repository(
-            repository_ctx,
-            get_host_environ(repository_ctx, _TF_CUDA_CONFIG_REPO),
-        )
+        fail("Not implemented")
+        # has_cuda_version = get_host_environ(repository_ctx, _TF_CUDA_VERSION) != None
+        # has_cudnn_version = get_host_environ(repository_ctx, _TF_CUDNN_VERSION) != None
+        # if not has_cuda_version or not has_cudnn_version:
+        #     auto_configure_fail("%s and %s must also be set if %s is specified" %
+        #                         (_TF_CUDA_VERSION, _TF_CUDNN_VERSION, _TF_CUDA_CONFIG_REPO))
+        # _create_remote_cuda_repository(
+        #     repository_ctx,
+        #     get_host_environ(repository_ctx, _TF_CUDA_CONFIG_REPO),
+        # )
     else:
         _create_local_cuda_repository(repository_ctx)

@@ -1472,14 +1474,14 @@ _ENVIRONS = [
     "TF_CUDA_PATHS",
 ] + _MSVC_ENVVARS

-remote_cuda_configure = repository_rule(
-    implementation = _create_local_cuda_repository,
-    environ = _ENVIRONS,
-    remotable = True,
-    attrs = {
-        "environ": attr.string_dict(),
-    },
-)
+# remote_cuda_configure = repository_rule(
+#     implementation = _create_local_cuda_repository,
+#     environ = _ENVIRONS,
+#     remotable = True,
+#     attrs = {
+#         "environ": attr.string_dict(),
+#     },
+# )

 cuda_configure = repository_rule(
     implementation = _cuda_autoconf_impl,
diff --git a/third_party/remote_config/common.bzl b/third_party/remote_config/common.bzl
index 57fb6fcf7ac..16cdb9c14e2 100644
--- a/third_party/remote_config/common.bzl
+++ b/third_party/remote_config/common.bzl
@@ -287,7 +287,7 @@ def realpath(repository_ctx, path, bash_bin = None):
     if bash_bin == None:
         bash_bin = get_bash_bin(repository_ctx)

-    return execute(repository_ctx, [bash_bin, "-c", "realpath \"%s\"" % path]).stdout.strip()
+    return path#execute(repository_ctx, [bash_bin, "-c", "realpath \"%s\"" % path]).stdout.strip()
